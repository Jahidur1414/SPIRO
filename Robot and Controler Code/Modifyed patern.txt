

#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
 
Adafruit_PWMServoDriver pwm1 = Adafruit_PWMServoDriver(0x40);
Adafruit_PWMServoDriver pwm2 = Adafruit_PWMServoDriver(0x41);

#define SERVOMIN  125 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  575 // this is the 'maximum' pulse length count (out of 4096)
 
void setup() {
  Serial.begin(9600);
  Serial.println("16 channel PWM test!");
 
  pwm1.begin();
  pwm1.setPWMFreq(60);  // This is the maximum PWM frequency
 
  pwm2.begin();
  pwm2.setPWMFreq(60);  // This is the maximum PWM frequency
}

int k=1;

// the code inside loop() has been updated by Robojax
void loop() {
  
   if(k==1){
   //---- A1------ PWM-1
   pwm1.setPWM(0, 0, angleToPulse(90) );
   pwm1.setPWM(1, 0, angleToPulse(90) );
   pwm1.setPWM(2, 0, angleToPulse(90) );

   //----- A2 ------ PWM-2
   pwm2.setPWM(15, 0, angleToPulse(90) );
   pwm2.setPWM(14, 0, angleToPulse(90) );
   pwm2.setPWM(13, 0, angleToPulse(90) );

   //---- B1 ------ PWM-1
   pwm1.setPWM(8, 0, angleToPulse(90) );
   pwm1.setPWM(9, 0, angleToPulse(90) );
   pwm1.setPWM(10, 0, angleToPulse(90) );

   //----- B2 ------ PWM-2
   pwm2.setPWM(5, 0, angleToPulse(90) );
   pwm2.setPWM(6, 0, angleToPulse(90) );
   pwm2.setPWM(7, 0, angleToPulse(90) );
  
   //----- C1 ------ PWM-1
   pwm1.setPWM(15, 0, angleToPulse(90) );
   pwm1.setPWM(14, 0, angleToPulse(90) );
   pwm1.setPWM(13, 0, angleToPulse(90) );

   //----- C2 ------ PWM-2
   pwm2.setPWM(0, 0, angleToPulse(90) );
   pwm2.setPWM(1, 0, angleToPulse(90) );
   pwm2.setPWM(2, 0, angleToPulse(90) );

   delay(500);
   }
   k+=10;

   
   int i, a, b, c, d, e;


   for(i=90; i<=160; i+=2)
   {
    pwm1.setPWM(1, 0, angleToPulse(i) );//A1
    pwm2.setPWM(6, 0, angleToPulse(i) );
    pwm1.setPWM(14, 0, angleToPulse(i) );
   }
   pwm1.setPWM(15, 0, angleToPulse(90) );
   delay(100);


   a=90, b=90, c=90, d=90;
   for(i=1; i<=30; i+=2)
   {
    pwm2.setPWM(13, 0, angleToPulse(a) );//A2
    a-=2;
    pwm1.setPWM(10, 0, angleToPulse(b) );
    b+=2;
    pwm2.setPWM(2, 0, angleToPulse(c) );
    c-=2;
    pwm2.setPWM(0, 0, angleToPulse(d) );
    d+=2;
   }
   delay(100);


   ///--------------------------
   a=90, b=90, c=90, d=90;
   for(i=1; i<=30; i+=2)
   {
    pwm1.setPWM(2, 0, angleToPulse(a) ); //A1
    a-=2;
    pwm2.setPWM(7, 0, angleToPulse(b) );
    b+=2;
    pwm1.setPWM(13, 0, angleToPulse(c) );
    c-=2;
    pwm1.setPWM(0, 0, angleToPulse(d) );
    d+=2;
   }
   delay(100);
   
   for(i=160; i>=90; i-=2)
   {
    pwm1.setPWM(1, 0, angleToPulse(i) );//A1
    pwm2.setPWM(6, 0, angleToPulse(i) );
    pwm1.setPWM(14, 0, angleToPulse(i) );
   }
   delay(100);

   for(i=90; i<=160; i+=2)
   {
    pwm2.setPWM(14, 0, angleToPulse(i) );//A2
    pwm1.setPWM(9, 0, angleToPulse(i) );
    pwm2.setPWM(1, 0, angleToPulse(i) );
   }
   delay(100);

   a=60, b=120, c=60, d=120;
   for(i=1; i<=30; i+=2)
   {
    pwm2.setPWM(13, 0, angleToPulse(a) );//A2
    a+=2;
    pwm1.setPWM(10, 0, angleToPulse(b) );
    b-=2;
    pwm2.setPWM(2, 0, angleToPulse(c) );
    c+=2;
    pwm2.setPWM(0, 0, angleToPulse(d) );
    d-=2;
   }
   delay(100);

   a=60, b=120, c=60, d=120, e=90;
   for(i=1; i<=30; i+=2)
   {
    pwm1.setPWM(2, 0, angleToPulse(a) ); //A1
    a+=2;
    pwm2.setPWM(7, 0, angleToPulse(b) );
    b-=2;
    pwm1.setPWM(13, 0, angleToPulse(c) );
    c+=2;
    pwm1.setPWM(0, 0, angleToPulse(d) );
    d-=2;
    pwm1.setPWM(15, 0, angleToPulse(e) );
    e+=2;
   }
   delay(100);
   
   for(i=160; i>=90; i-=2)
   {
    pwm2.setPWM(14, 0, angleToPulse(i) );//A2
    pwm1.setPWM(9, 0, angleToPulse(i) );
    pwm2.setPWM(1, 0, angleToPulse(i) );
   }
   delay(100);

   /*

   for(i=90; i<=160; i+=5)
   {
    pwm2.setPWM(14, 0, angleToPulse(i) );//A2
    pwm1.setPWM(9, 0, angleToPulse(i) );
    pwm2.setPWM(1, 0, angleToPulse(i) );
   }
   delay(100);

   a=90, b=90, c=90, d=90;
   for(i=1; i<=30; i+=2)
   {
    pwm1.setPWM(2, 0, angleToPulse(a) );//A1
    a+=2;
    pwm2.setPWM(7, 0, angleToPulse(b));
    b-=2;
    pwm1.setPWM(13, 0, angleToPulse(c) );
    c+=2;
    pwm1.setPWM(15, 0, angleToPulse(d) );
    d+=2;
   }

   delay(100);

   for(i=160; i>=90; i-=2)
   {
    pwm2.setPWM(14, 0, angleToPulse(i) );//A2
    pwm1.setPWM(9, 0, angleToPulse(i) );
    pwm2.setPWM(1, 0, angleToPulse(i) );
   }
   delay(100);
   
   
   for(i=90; i<=160; i+=2)
   {
    pwm1.setPWM(1, 0, angleToPulse(i) );//A1
    pwm2.setPWM(6, 0, angleToPulse(i) );
    pwm1.setPWM(14, 0, angleToPulse(i) );
   }
   delay(100);

   a=120, b=60, c=120, d=120;
   for(i=1; i<=30; i+=2)
   {
    pwm1.setPWM(2, 0, angleToPulse(a) );//A1
    a-=2;
    pwm2.setPWM(7, 0, angleToPulse(b));
    b+=2;
    pwm1.setPWM(13, 0, angleToPulse(c) );
    c-=2;
    pwm1.setPWM(15, 0, angleToPulse(d) );
    d-=2;
   }
   
   delay(100);

   for(i=160; i>=90; i-=2)
   {
    pwm1.setPWM(1, 0, angleToPulse(i) );//A1
    pwm2.setPWM(6, 0, angleToPulse(i) );
    pwm1.setPWM(14, 0, angleToPulse(i) );
   }
   delay(100);
   */
   
   
}

/*
 * angleToPulse(int ang)
 * gets angle in degree and returns the pulse width
 * also prints the value on seial monitor
 */
int angleToPulse(int ang){
   int pulse = map(ang,0, 180, SERVOMIN,SERVOMAX);// map angle of 0 to 180 to Servo min and Servo max 
   Serial.print("Angle: ");Serial.print(ang);
   Serial.print(" pulse: ");Serial.println(pulse);
   return pulse;
}